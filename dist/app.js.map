{"mappings":"MAMAA,EAMAC,EAWAC,E,4KCtBeC,EAAAC,SAAf,MAEMC,EAAiB,CACrBC,OAAQC,QAAQC,IAAIC,QACpBC,WAAYH,QAAQC,IAAIG,YACxBC,YAAaL,QAAQC,IAAIK,OACzBC,UAAWP,QAAQC,IAAIO,WACvBC,cAAeT,QAAQC,IAAIS,eAC3BC,kBAAmBX,QAAQC,IAAIW,oBAC/BC,MAAOb,QAAQC,IAAIa,QAGrBC,EAAgBC,EAAAC,cAAuBnB,GDVvC,MAAMoB,EAAKC,EAAAC,YAAqBL,GAC1BM,EAAcF,EAAAG,IAAaJ,GAEjCzB,EAAwB8B,gBAEdJ,EAAAK,IAAaL,EAAAM,MAAeJ,EAAa,2BAC/CK,MAGJhC,EAAyB6B,UACvB,MAAMI,EAAa,GACbC,SACET,EAAAK,IAAaL,EAAAM,MAAeJ,EAAa,sBAC/CK,MAIF,OAHAG,OAAOC,KAAKF,GAAWG,SAASC,IAC9BL,EAAWM,KAAK,CAAEC,UAAWF,EAAQG,SAAUP,EAAUI,IAAQ,IAE5DL,CAAA,EAGThC,EAAsB4B,UACpB,MAAMa,SACEjB,EAAAK,IAAaL,EAAAM,MAAeJ,EAAa,sBAC/CK,MACIW,EAAc,GAIpB,OAHAR,OAAOC,KAAKM,GAAYL,SAASO,IAC/BD,EAAYJ,KAAKG,EAAWE,GAAI,IAE3BD,CAAA,EE1BT,MAAME,EAASC,EAAAC,SACfF,EAAOG,IAAIF,EAAAG,QAGXJ,EAAOf,IAAI,cAkBXD,eAA6BqB,EAAKC,EAAKC,GACrC,MAAMC,EAAWC,EAAAC,KAAUC,EAAU,aACrC,GAAIC,EAAAC,WAAcL,GAChB,OAAOF,EAAIQ,OAAO,KAAKC,SAASP,GAElC,MAAMQ,QAAiB9D,IAIvB,OAHA0D,EAAAK,UAAaT,EAAUU,KAAKC,UAAUH,IAAYI,IAC5CA,GAAKC,QAAQC,IAAIF,EAAA,IAEhBd,EAAIQ,OAAO,KAAKV,KAAKY,EAC9B,IA3BAhB,EAAOf,IAAI,gBAoCXD,eAA8BqB,EAAKC,EAAKC,GACtC,MAAMC,EAAWC,EAAAC,KAAUC,EAAU,eACrC,GAAIC,EAAAC,WAAcL,GAChB,OAAOF,EAAIQ,OAAO,KAAKC,SAASP,GAElC,MAAMQ,QAAiB7D,IAIvB,OAHAyD,EAAAK,UAAaT,EAAUU,KAAKC,UAAUH,IAAYI,IAC5CA,GAAKC,QAAQC,IAAIF,EAAA,IAEhBd,EAAIQ,OAAO,KAAKV,KAAKY,EAC9B,IA7CAhB,EAAOf,IAAI,gBAsDXD,eAA2BqB,EAAKC,EAAKC,GACnC,MAAMC,EAAWC,EAAAC,KAAUC,EAAU,eACrC,GAAIC,EAAAC,WAAcL,GAChB,OAAOF,EAAIQ,OAAO,KAAKC,SAASP,GAElC,MAAMQ,QAAiB5D,IAIvB,OAHAwD,EAAAK,UAAaT,EAAUU,KAAKC,UAAUH,IAAYI,IAC5CA,GAAKC,QAAQC,IAAIF,EAAA,IAEhBd,EAAIQ,OAAO,KAAKV,KAAKY,EAC9B,IA7DAhB,EAAOuB,KAAK,kBAsEZvC,eAAwBqB,EAAKC,EAAKC,GACbE,EAAAC,KAAUC,EAAU,eAErC,OADAU,QAAQC,IAAIjB,EAAImB,MACTlB,EAAImB,KAAKpB,EAAImB,KAMtB,IA7EFE,EAAiB1B,EAEjB,MAAMW,EAAWF,EAAAC,KAAUiB,EAAW,KAAM,YCd5C,MAAMC,EAAM3B,IAEZ2B,EAAIzB,IAAI,iBAAkBuB,GAE1BE,EAAIC,OAAO","sources":["firebase/databaseOps.js","firebase/initFirebase.js","endpoints/api-endpoints.js","app.js"],"sourcesContent":["const firebase = require(\"firebase/database\");\nconst firebaseApp = require(\"./initFirebase\");\n\nconst db = firebase.getDatabase(firebaseApp);\nconst databaseRef = firebase.ref(db);\n\nexports.fetchPictures = async () => {\n  return (\n    await firebase.get(firebase.child(databaseRef, \"database/pictureGrid/\"))\n  ).val();\n};\n\nexports.fetchTableList = async () => {\n  const tableArray = [];\n  const tableList = (\n    await firebase.get(firebase.child(databaseRef, \"database/tables/\"))\n  ).val();\n  Object.keys(tableList).forEach((objKey) => {\n    tableArray.push({ tableName: objKey, seatList: tableList[objKey] });\n  });\n  return tableArray;\n};\n\nexports.fetchWishes = async () => {\n  const wishesData = (\n    await firebase.get(firebase.child(databaseRef, \"database/wishes/\"))\n  ).val();\n  const wishesArray = [];\n  Object.keys(wishesData).forEach((key) => {\n    wishesArray.push(wishesData[key]);\n  });\n  return wishesArray;\n};\n\nexports.makeWish = async (wishText, admin) => {\n  const newWishKey = firebase.push(\n    firebase.child(databaseRef, \"database/wishes/\")\n  ).key;\n  const updates = {};\n  updates[\"/database/wishes/\" + newWishKey] = {\n    id: newWishKey,\n    wish: wishText,\n    isAdmin: admin,\n  };\n\n  return await firebase.update(databaseRef, updates);\n};\n","const firebase = require(\"firebase/app\");\nconst dotenv = require('dotenv').config();\n\nconst firebaseConfig = {\n  apiKey: process.env.API_KEY,\n  authDomain: process.env.AUTH_DOMAIN,\n  databaseURL: process.env.DB_URL,\n  projectId: process.env.PROJECT_ID,\n  storageBucket: process.env.STORAGE_BUCKET,\n  messagingSenderId: process.env.MESSAGING_SENDER_ID,\n  appId: process.env.APP_ID,\n};\n\nmodule.exports= firebase.initializeApp(firebaseConfig);\n","const express = require(\"express\");\nconst db = require(\"../firebase/databaseOps\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\nconst router = express.Router();\nrouter.use(express.json());\n\n// api-endpoints/fetchpics, GET method\nrouter.get(\"/fetchpics\", fetchPictures);\nrouter.get(\"/fetchtables\", fetchTableList);\nrouter.get(\"/fetchwishes\", fetchWishes);\n\n// api-endpoints/post/, POST method\nrouter.post('/post/makewish', makeWish);\n\nmodule.exports = router;\n\nconst rootPath = path.join(__dirname, \"..\", \"jsonData\");\n\n/**\n *\n * @param {*} req Request object\n * @param {*} res Response object\n * @param {*} next Calls next middleware function\n * @returns JSON file with pictures data\n */\nasync function fetchPictures(req, res, next) {\n  const filePath = path.join(rootPath, \"pics.json\");\n  if (fs.existsSync(filePath)) {\n    return res.status(200).sendFile(filePath);\n  }\n  const response = await db.fetchPictures();\n  fs.writeFile(filePath, JSON.stringify(response), (err) => {\n    if (err) console.log(err);\n  });\n  return res.status(201).json(response);\n}\n\n/**\n *\n * @param {*} req Request object\n * @param {*} res Response object\n * @param {*} next Calls next middleware function\n * @returns JSON file with tables data\n */\nasync function fetchTableList(req, res, next) {\n  const filePath = path.join(rootPath, \"tables.json\");\n  if (fs.existsSync(filePath)) {\n    return res.status(200).sendFile(filePath);\n  }\n  const response = await db.fetchTableList();\n  fs.writeFile(filePath, JSON.stringify(response), (err) => {\n    if (err) console.log(err);\n  });\n  return res.status(201).json(response);\n}\n\n/**\n *\n * @param {*} req Request object\n * @param {*} res Response object\n * @param {*} next Calls next middleware function\n * @returns JSON file with wishes data\n */\nasync function fetchWishes(req, res, next) {\n  const filePath = path.join(rootPath, \"wishes.json\");\n  if (fs.existsSync(filePath)) {\n    return res.status(200).sendFile(filePath);\n  }\n  const response = await db.fetchWishes();\n  fs.writeFile(filePath, JSON.stringify(response), (err) => {\n    if (err) console.log(err);\n  });\n  return res.status(201).json(response);\n}\n\n/**\n *\n * @param {*} req Request object\n * @param {*} res Response object\n * @param {*} next Calls next middleware function\n * @returns JSON file with wishes data\n */\nasync function makeWish(req, res, next) {\n    const filePath = path.join(rootPath, \"wishes.json\");\n    console.log(req.body);\n    return res.send(req.body);\n    // const response = await db.makeWish();\n    // fs.writeFile(filePath, JSON.stringify(response), (err) => {\n    //   if (err) console.log(err);\n    // });\n    // return res.status(201).json(response);\n  }\n","const express = require(\"express\");\n\nconst apiEndpoints = require(\"./endpoints/api-endpoints\");\n\nconst app = express();\n\napp.use(\"/api-endpoints\", apiEndpoints);\n\napp.listen(8080);\n"],"names":["$8425936a64c35dce$export$f7fc95ee322f5fc3","$8425936a64c35dce$export$db50160eadf42477","$8425936a64c35dce$export$5e93789398d2938d","$9Hiap$dotenv","config","$258b6ca16bcc0cbb$var$firebaseConfig","apiKey","process","env","API_KEY","authDomain","AUTH_DOMAIN","databaseURL","DB_URL","projectId","PROJECT_ID","storageBucket","STORAGE_BUCKET","messagingSenderId","MESSAGING_SENDER_ID","appId","APP_ID","$258b6ca16bcc0cbb$exports","$9Hiap$firebaseapp","initializeApp","$8425936a64c35dce$var$db","$9Hiap$firebasedatabase","getDatabase","$8425936a64c35dce$var$databaseRef","ref","async","get","child","val","tableArray","tableList","Object","keys","forEach","objKey","push","tableName","seatList","wishesData","wishesArray","key","$e16b2c1c8b4ded2e$var$router","$9Hiap$express","Router","use","json","req","res","next","filePath","$9Hiap$path","join","$e16b2c1c8b4ded2e$var$rootPath","$9Hiap$fs","existsSync","status","sendFile","response","writeFile","JSON","stringify","err","console","log","post","body","send","$e16b2c1c8b4ded2e$exports","$e16b2c1c8b4ded2e$var$$parcel$__dirname","$fafc7d5d84881dd4$var$app","listen"],"version":3,"file":"app.js.map","sourceRoot":"../"}